# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from lcsr_nettools/TopicStatistics.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import lcsr_nettools.msg
import genpy
import std_msgs.msg

class TopicStatistics(genpy.Message):
  _md5sum = "414ca0d7c2276abebacb6812196057cd"
  _type = "lcsr_nettools/TopicStatistics"
  _has_header = True #flag to mark the presence of a Header object
  _full_text = """std_msgs/Header header

string topic_name
duration recent_buffer_duration

lcsr_nettools/TopicMeasurements recent
lcsr_nettools/TopicMeasurements all_time

================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
# 0: no frame
# 1: global frame
string frame_id

================================================================================
MSG: lcsr_nettools/TopicMeasurements
float64 msg_loss
time first_recv_time
time latest_recv_time
lcsr_nettools/StatisticsMeasurements latency
lcsr_nettools/StatisticsMeasurements frequency

================================================================================
MSG: lcsr_nettools/StatisticsMeasurements
float64 avg
float64 std
float64 min
float64 max
"""
  __slots__ = ['header','topic_name','recent_buffer_duration','recent','all_time']
  _slot_types = ['std_msgs/Header','string','duration','lcsr_nettools/TopicMeasurements','lcsr_nettools/TopicMeasurements']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       header,topic_name,recent_buffer_duration,recent,all_time

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(TopicStatistics, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.topic_name is None:
        self.topic_name = ''
      if self.recent_buffer_duration is None:
        self.recent_buffer_duration = genpy.Duration()
      if self.recent is None:
        self.recent = lcsr_nettools.msg.TopicMeasurements()
      if self.all_time is None:
        self.all_time = lcsr_nettools.msg.TopicMeasurements()
    else:
      self.header = std_msgs.msg.Header()
      self.topic_name = ''
      self.recent_buffer_duration = genpy.Duration()
      self.recent = lcsr_nettools.msg.TopicMeasurements()
      self.all_time = lcsr_nettools.msg.TopicMeasurements()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.topic_name
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_2id4I9d4I8d().pack(_x.recent_buffer_duration.secs, _x.recent_buffer_duration.nsecs, _x.recent.msg_loss, _x.recent.first_recv_time.secs, _x.recent.first_recv_time.nsecs, _x.recent.latest_recv_time.secs, _x.recent.latest_recv_time.nsecs, _x.recent.latency.avg, _x.recent.latency.std, _x.recent.latency.min, _x.recent.latency.max, _x.recent.frequency.avg, _x.recent.frequency.std, _x.recent.frequency.min, _x.recent.frequency.max, _x.all_time.msg_loss, _x.all_time.first_recv_time.secs, _x.all_time.first_recv_time.nsecs, _x.all_time.latest_recv_time.secs, _x.all_time.latest_recv_time.nsecs, _x.all_time.latency.avg, _x.all_time.latency.std, _x.all_time.latency.min, _x.all_time.latency.max, _x.all_time.frequency.avg, _x.all_time.frequency.std, _x.all_time.frequency.min, _x.all_time.frequency.max))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.recent_buffer_duration is None:
        self.recent_buffer_duration = genpy.Duration()
      if self.recent is None:
        self.recent = lcsr_nettools.msg.TopicMeasurements()
      if self.all_time is None:
        self.all_time = lcsr_nettools.msg.TopicMeasurements()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.header.frame_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.topic_name = str[start:end].decode('utf-8')
      else:
        self.topic_name = str[start:end]
      _x = self
      start = end
      end += 184
      (_x.recent_buffer_duration.secs, _x.recent_buffer_duration.nsecs, _x.recent.msg_loss, _x.recent.first_recv_time.secs, _x.recent.first_recv_time.nsecs, _x.recent.latest_recv_time.secs, _x.recent.latest_recv_time.nsecs, _x.recent.latency.avg, _x.recent.latency.std, _x.recent.latency.min, _x.recent.latency.max, _x.recent.frequency.avg, _x.recent.frequency.std, _x.recent.frequency.min, _x.recent.frequency.max, _x.all_time.msg_loss, _x.all_time.first_recv_time.secs, _x.all_time.first_recv_time.nsecs, _x.all_time.latest_recv_time.secs, _x.all_time.latest_recv_time.nsecs, _x.all_time.latency.avg, _x.all_time.latency.std, _x.all_time.latency.min, _x.all_time.latency.max, _x.all_time.frequency.avg, _x.all_time.frequency.std, _x.all_time.frequency.min, _x.all_time.frequency.max,) = _get_struct_2id4I9d4I8d().unpack(str[start:end])
      self.recent_buffer_duration.canon()
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.topic_name
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_2id4I9d4I8d().pack(_x.recent_buffer_duration.secs, _x.recent_buffer_duration.nsecs, _x.recent.msg_loss, _x.recent.first_recv_time.secs, _x.recent.first_recv_time.nsecs, _x.recent.latest_recv_time.secs, _x.recent.latest_recv_time.nsecs, _x.recent.latency.avg, _x.recent.latency.std, _x.recent.latency.min, _x.recent.latency.max, _x.recent.frequency.avg, _x.recent.frequency.std, _x.recent.frequency.min, _x.recent.frequency.max, _x.all_time.msg_loss, _x.all_time.first_recv_time.secs, _x.all_time.first_recv_time.nsecs, _x.all_time.latest_recv_time.secs, _x.all_time.latest_recv_time.nsecs, _x.all_time.latency.avg, _x.all_time.latency.std, _x.all_time.latency.min, _x.all_time.latency.max, _x.all_time.frequency.avg, _x.all_time.frequency.std, _x.all_time.frequency.min, _x.all_time.frequency.max))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.recent_buffer_duration is None:
        self.recent_buffer_duration = genpy.Duration()
      if self.recent is None:
        self.recent = lcsr_nettools.msg.TopicMeasurements()
      if self.all_time is None:
        self.all_time = lcsr_nettools.msg.TopicMeasurements()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.header.frame_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.topic_name = str[start:end].decode('utf-8')
      else:
        self.topic_name = str[start:end]
      _x = self
      start = end
      end += 184
      (_x.recent_buffer_duration.secs, _x.recent_buffer_duration.nsecs, _x.recent.msg_loss, _x.recent.first_recv_time.secs, _x.recent.first_recv_time.nsecs, _x.recent.latest_recv_time.secs, _x.recent.latest_recv_time.nsecs, _x.recent.latency.avg, _x.recent.latency.std, _x.recent.latency.min, _x.recent.latency.max, _x.recent.frequency.avg, _x.recent.frequency.std, _x.recent.frequency.min, _x.recent.frequency.max, _x.all_time.msg_loss, _x.all_time.first_recv_time.secs, _x.all_time.first_recv_time.nsecs, _x.all_time.latest_recv_time.secs, _x.all_time.latest_recv_time.nsecs, _x.all_time.latency.avg, _x.all_time.latency.std, _x.all_time.latency.min, _x.all_time.latency.max, _x.all_time.frequency.avg, _x.all_time.frequency.std, _x.all_time.frequency.min, _x.all_time.frequency.max,) = _get_struct_2id4I9d4I8d().unpack(str[start:end])
      self.recent_buffer_duration.canon()
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_2id4I9d4I8d = None
def _get_struct_2id4I9d4I8d():
    global _struct_2id4I9d4I8d
    if _struct_2id4I9d4I8d is None:
        _struct_2id4I9d4I8d = struct.Struct("<2id4I9d4I8d")
    return _struct_2id4I9d4I8d
_struct_3I = None
def _get_struct_3I():
    global _struct_3I
    if _struct_3I is None:
        _struct_3I = struct.Struct("<3I")
    return _struct_3I
