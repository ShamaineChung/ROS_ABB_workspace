# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from lcsr_nettools/TopicMeasurements.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import genpy
import lcsr_nettools.msg

class TopicMeasurements(genpy.Message):
  _md5sum = "6e15701183cd32bc7d08590562cf3f21"
  _type = "lcsr_nettools/TopicMeasurements"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """float64 msg_loss
time first_recv_time
time latest_recv_time
lcsr_nettools/StatisticsMeasurements latency
lcsr_nettools/StatisticsMeasurements frequency

================================================================================
MSG: lcsr_nettools/StatisticsMeasurements
float64 avg
float64 std
float64 min
float64 max
"""
  __slots__ = ['msg_loss','first_recv_time','latest_recv_time','latency','frequency']
  _slot_types = ['float64','time','time','lcsr_nettools/StatisticsMeasurements','lcsr_nettools/StatisticsMeasurements']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       msg_loss,first_recv_time,latest_recv_time,latency,frequency

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(TopicMeasurements, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.msg_loss is None:
        self.msg_loss = 0.
      if self.first_recv_time is None:
        self.first_recv_time = genpy.Time()
      if self.latest_recv_time is None:
        self.latest_recv_time = genpy.Time()
      if self.latency is None:
        self.latency = lcsr_nettools.msg.StatisticsMeasurements()
      if self.frequency is None:
        self.frequency = lcsr_nettools.msg.StatisticsMeasurements()
    else:
      self.msg_loss = 0.
      self.first_recv_time = genpy.Time()
      self.latest_recv_time = genpy.Time()
      self.latency = lcsr_nettools.msg.StatisticsMeasurements()
      self.frequency = lcsr_nettools.msg.StatisticsMeasurements()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_d4I8d().pack(_x.msg_loss, _x.first_recv_time.secs, _x.first_recv_time.nsecs, _x.latest_recv_time.secs, _x.latest_recv_time.nsecs, _x.latency.avg, _x.latency.std, _x.latency.min, _x.latency.max, _x.frequency.avg, _x.frequency.std, _x.frequency.min, _x.frequency.max))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.first_recv_time is None:
        self.first_recv_time = genpy.Time()
      if self.latest_recv_time is None:
        self.latest_recv_time = genpy.Time()
      if self.latency is None:
        self.latency = lcsr_nettools.msg.StatisticsMeasurements()
      if self.frequency is None:
        self.frequency = lcsr_nettools.msg.StatisticsMeasurements()
      end = 0
      _x = self
      start = end
      end += 88
      (_x.msg_loss, _x.first_recv_time.secs, _x.first_recv_time.nsecs, _x.latest_recv_time.secs, _x.latest_recv_time.nsecs, _x.latency.avg, _x.latency.std, _x.latency.min, _x.latency.max, _x.frequency.avg, _x.frequency.std, _x.frequency.min, _x.frequency.max,) = _get_struct_d4I8d().unpack(str[start:end])
      self.first_recv_time.canon()
      self.latest_recv_time.canon()
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_d4I8d().pack(_x.msg_loss, _x.first_recv_time.secs, _x.first_recv_time.nsecs, _x.latest_recv_time.secs, _x.latest_recv_time.nsecs, _x.latency.avg, _x.latency.std, _x.latency.min, _x.latency.max, _x.frequency.avg, _x.frequency.std, _x.frequency.min, _x.frequency.max))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.first_recv_time is None:
        self.first_recv_time = genpy.Time()
      if self.latest_recv_time is None:
        self.latest_recv_time = genpy.Time()
      if self.latency is None:
        self.latency = lcsr_nettools.msg.StatisticsMeasurements()
      if self.frequency is None:
        self.frequency = lcsr_nettools.msg.StatisticsMeasurements()
      end = 0
      _x = self
      start = end
      end += 88
      (_x.msg_loss, _x.first_recv_time.secs, _x.first_recv_time.nsecs, _x.latest_recv_time.secs, _x.latest_recv_time.nsecs, _x.latency.avg, _x.latency.std, _x.latency.min, _x.latency.max, _x.frequency.avg, _x.frequency.std, _x.frequency.min, _x.frequency.max,) = _get_struct_d4I8d().unpack(str[start:end])
      self.first_recv_time.canon()
      self.latest_recv_time.canon()
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_d4I8d = None
def _get_struct_d4I8d():
    global _struct_d4I8d
    if _struct_d4I8d is None:
        _struct_d4I8d = struct.Struct("<d4I8d")
    return _struct_d4I8d
