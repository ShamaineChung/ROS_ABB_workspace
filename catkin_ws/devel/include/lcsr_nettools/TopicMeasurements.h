// Generated by gencpp from file lcsr_nettools/TopicMeasurements.msg
// DO NOT EDIT!


#ifndef LCSR_NETTOOLS_MESSAGE_TOPICMEASUREMENTS_H
#define LCSR_NETTOOLS_MESSAGE_TOPICMEASUREMENTS_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <lcsr_nettools/StatisticsMeasurements.h>
#include <lcsr_nettools/StatisticsMeasurements.h>

namespace lcsr_nettools
{
template <class ContainerAllocator>
struct TopicMeasurements_
{
  typedef TopicMeasurements_<ContainerAllocator> Type;

  TopicMeasurements_()
    : msg_loss(0.0)
    , first_recv_time()
    , latest_recv_time()
    , latency()
    , frequency()  {
    }
  TopicMeasurements_(const ContainerAllocator& _alloc)
    : msg_loss(0.0)
    , first_recv_time()
    , latest_recv_time()
    , latency(_alloc)
    , frequency(_alloc)  {
  (void)_alloc;
    }



   typedef double _msg_loss_type;
  _msg_loss_type msg_loss;

   typedef ros::Time _first_recv_time_type;
  _first_recv_time_type first_recv_time;

   typedef ros::Time _latest_recv_time_type;
  _latest_recv_time_type latest_recv_time;

   typedef  ::lcsr_nettools::StatisticsMeasurements_<ContainerAllocator>  _latency_type;
  _latency_type latency;

   typedef  ::lcsr_nettools::StatisticsMeasurements_<ContainerAllocator>  _frequency_type;
  _frequency_type frequency;





  typedef boost::shared_ptr< ::lcsr_nettools::TopicMeasurements_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::lcsr_nettools::TopicMeasurements_<ContainerAllocator> const> ConstPtr;

}; // struct TopicMeasurements_

typedef ::lcsr_nettools::TopicMeasurements_<std::allocator<void> > TopicMeasurements;

typedef boost::shared_ptr< ::lcsr_nettools::TopicMeasurements > TopicMeasurementsPtr;
typedef boost::shared_ptr< ::lcsr_nettools::TopicMeasurements const> TopicMeasurementsConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::lcsr_nettools::TopicMeasurements_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::lcsr_nettools::TopicMeasurements_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace lcsr_nettools

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'lcsr_nettools': ['/home/shamaine/catkin_ws/src/lcsr_nettools/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::lcsr_nettools::TopicMeasurements_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::lcsr_nettools::TopicMeasurements_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::lcsr_nettools::TopicMeasurements_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::lcsr_nettools::TopicMeasurements_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::lcsr_nettools::TopicMeasurements_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::lcsr_nettools::TopicMeasurements_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::lcsr_nettools::TopicMeasurements_<ContainerAllocator> >
{
  static const char* value()
  {
    return "6e15701183cd32bc7d08590562cf3f21";
  }

  static const char* value(const ::lcsr_nettools::TopicMeasurements_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x6e15701183cd32bcULL;
  static const uint64_t static_value2 = 0x7d08590562cf3f21ULL;
};

template<class ContainerAllocator>
struct DataType< ::lcsr_nettools::TopicMeasurements_<ContainerAllocator> >
{
  static const char* value()
  {
    return "lcsr_nettools/TopicMeasurements";
  }

  static const char* value(const ::lcsr_nettools::TopicMeasurements_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::lcsr_nettools::TopicMeasurements_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float64 msg_loss\n\
time first_recv_time\n\
time latest_recv_time\n\
lcsr_nettools/StatisticsMeasurements latency\n\
lcsr_nettools/StatisticsMeasurements frequency\n\
\n\
================================================================================\n\
MSG: lcsr_nettools/StatisticsMeasurements\n\
float64 avg\n\
float64 std\n\
float64 min\n\
float64 max\n\
";
  }

  static const char* value(const ::lcsr_nettools::TopicMeasurements_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::lcsr_nettools::TopicMeasurements_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.msg_loss);
      stream.next(m.first_recv_time);
      stream.next(m.latest_recv_time);
      stream.next(m.latency);
      stream.next(m.frequency);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct TopicMeasurements_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::lcsr_nettools::TopicMeasurements_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::lcsr_nettools::TopicMeasurements_<ContainerAllocator>& v)
  {
    s << indent << "msg_loss: ";
    Printer<double>::stream(s, indent + "  ", v.msg_loss);
    s << indent << "first_recv_time: ";
    Printer<ros::Time>::stream(s, indent + "  ", v.first_recv_time);
    s << indent << "latest_recv_time: ";
    Printer<ros::Time>::stream(s, indent + "  ", v.latest_recv_time);
    s << indent << "latency: ";
    s << std::endl;
    Printer< ::lcsr_nettools::StatisticsMeasurements_<ContainerAllocator> >::stream(s, indent + "  ", v.latency);
    s << indent << "frequency: ";
    s << std::endl;
    Printer< ::lcsr_nettools::StatisticsMeasurements_<ContainerAllocator> >::stream(s, indent + "  ", v.frequency);
  }
};

} // namespace message_operations
} // namespace ros

#endif // LCSR_NETTOOLS_MESSAGE_TOPICMEASUREMENTS_H
